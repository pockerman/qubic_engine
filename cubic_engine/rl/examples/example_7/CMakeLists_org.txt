cmake_minimum_required(VERSION 3.0)
PROJECT(example_7 CXX)
SET(SOURCE example_7.cpp)
SET(EXECUTABLE  example_7)

# find Boost
FIND_PACKAGE(Boost 1.65.0 REQUIRED)
IF(Boost_FOUND)
	MESSAGE( STATUS  "Found needed Boost C++ library.")
	SET(Boost_USE_SHARED_LIBS ON)
ELSE()
	MESSAGE( FATAL_ERROR  "Boost C++ library is required but not found.")
ENDIF()


# find OpenBLAS
FIND_PACKAGE(BLAS REQUIRED)
IF(NOT BLAS_FOUND)
	MESSAGE( FATAL_ERROR  "Could not find OpenBLAS library.")
ELSE()
	MESSAGE( STATUS  "Found needed BLAS library.")
ENDIF()

LIST(APPEND CMAKE_PREFIX_PATH /home/alex/MySoftware/libtorch)
FIND_PACKAGE(Torch REQUIRED CONFIG)
MESSAGE(STATUS "TORCH Include directory ${TORCH_INCLUDE_DIRS}")

SET(CMAKE_CXX_FLAGS "-std=c++17 -g -pthread -fopenmp -fPIC")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${TORCH_CXX_FLAGS}")
MESSAGE(STATUS " CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ")

INCLUDE_DIRECTORIES(/home/alex/MySoftware/blaze-3.8/install/include)
INCLUDE_DIRECTORIES(${BOOST_INCLUDEDIR})
INCLUDE_DIRECTORIES(/home/alex/MySoftware/nlohman_json/install/include)
INCLUDE_DIRECTORIES("/home/alex/qi3/ce_rl/third_party")
INCLUDE_DIRECTORIES(${BLAZE_INCL_DIR})
INCLUDE_DIRECTORIES(${BOOST_INCLUDEDIR})
INCLUDE_DIRECTORIES(${TORCH_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(/home/alex/qi3/ce_rl/cubic_engine/rl/src/)
INCLUDE_DIRECTORIES(/home/alex/qi3/ce_rl/cubic_engine/cengine/src/)
INCLUDE_DIRECTORIES(/home/alex/MySoftware/msgpack/install/include/)
INCLUDE_DIRECTORIES(/home/alex/qi3/ce_rl/kernel/numerics/src)
INCLUDE_DIRECTORIES(/home/alex/qi3/ce_rl/cubic_engine/ml/src)
INCLUDE_DIRECTORIES(/home/alex/MySoftware/zmq/install/include)
INCLUDE_DIRECTORIES(/home/alex/qi3/ce_rl/kernel/kernel/base/src)
INCLUDE_DIRECTORIES(/home/alex/qi3/ce_rl/kernel/kernel/data_structs/src)
INCLUDE_DIRECTORIES(/home/alex/qi3/ce_rl/kernel/kernel/geometry/src)
INCLUDE_DIRECTORIES(/home/alex/qi3/ce_rl/kernel/kernel/maths/src)
INCLUDE_DIRECTORIES(/home/alex/qi3/ce_rl/kernel/kernel/parallel/src)
INCLUDE_DIRECTORIES(/home/alex/qi3/ce_rl/kernel/kernel/patterns/src)
INCLUDE_DIRECTORIES(/home/alex/qi3/ce_rl/kernel/kernel/utilities/src)
INCLUDE_DIRECTORIES(/home/alex/qi3/ce_rl/cubic_engine/rl/examples/example_6/gymfcpp/src/)

LINK_DIRECTORIES(/home/alex/qi3/ce_rl/install)
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
LINK_DIRECTORIES(/home/alex/MySoftware/zmq/install/lib)
LINK_DIRECTORIES(/home/alex/qi3/ce_rl/cubic_engine/rl/examples/example_6/gymfcpp/install)
LINK_DIRECTORIES(/usr/lib/python3.8/config-3.8-x86_64-linux-gnu/)

ADD_EXECUTABLE(${EXECUTABLE} ${SOURCE})

TARGET_LINK_LIBRARIES(${EXECUTABLE} cengine_rl)
TARGET_LINK_LIBRARIES(${EXECUTABLE} kernel)
TARGET_LINK_LIBRARIES(${EXECUTABLE} kernel_numerics)
TARGET_LINK_LIBRARIES(${EXECUTABLE} cengine)
TARGET_LINK_LIBRARIES(${EXECUTABLE} cengine_ml)
TARGET_LINK_LIBRARIES(${EXECUTABLE} ${TORCH_LIBRARIES})
TARGET_LINK_LIBRARIES(${EXECUTABLE} gymfcpplib)
TARGET_LINK_LIBRARIES(${EXECUTABLE} zmq)
TARGET_LINK_LIBRARIES(${EXECUTABLE} pthread)
TARGET_LINK_LIBRARIES(${EXECUTABLE} openblas)
TARGET_LINK_LIBRARIES(${EXECUTABLE} python3.8)
TARGET_LINK_LIBRARIES(${EXECUTABLE} boost_python38)
TARGET_LINK_LIBRARIES(${EXECUTABLE} boost_system)
